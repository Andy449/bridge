/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nuctech.bridge.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-12-16")
public class TextObject implements org.apache.thrift.TBase<TextObject, TextObject._Fields>, java.io.Serializable, Cloneable, Comparable<TextObject> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TextObject");

  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BOX_FIELD_DESC = new org.apache.thrift.protocol.TField("box", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("confidence", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField TXT_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("txt_img", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TextObjectStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TextObjectTupleSchemeFactory();

  public  java.lang.String text; // required
  public  Tetragon box; // required
  public double confidence; // required
  public  Image txt_img; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEXT((short)1, "text"),
    BOX((short)2, "box"),
    CONFIDENCE((short)3, "confidence"),
    TXT_IMG((short)4, "txt_img");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEXT
          return TEXT;
        case 2: // BOX
          return BOX;
        case 3: // CONFIDENCE
          return CONFIDENCE;
        case 4: // TXT_IMG
          return TXT_IMG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONFIDENCE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOX, new org.apache.thrift.meta_data.FieldMetaData("box", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tetragon.class)));
    tmpMap.put(_Fields.CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("confidence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TXT_IMG, new org.apache.thrift.meta_data.FieldMetaData("txt_img", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Image.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TextObject.class, metaDataMap);
  }

  public TextObject() {
  }

  public TextObject(
    java.lang.String text,
    Tetragon box,
    double confidence,
    Image txt_img)
  {
    this();
    this.text = text;
    this.box = box;
    this.confidence = confidence;
    setConfidenceIsSet(true);
    this.txt_img = txt_img;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TextObject(TextObject other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetText()) {
      this.text = other.text;
    }
    if (other.isSetBox()) {
      this.box = new Tetragon(other.box);
    }
    this.confidence = other.confidence;
    if (other.isSetTxt_img()) {
      this.txt_img = new Image(other.txt_img);
    }
  }

  public TextObject deepCopy() {
    return new TextObject(this);
  }

  @Override
  public void clear() {
    this.text = null;
    this.box = null;
    setConfidenceIsSet(false);
    this.confidence = 0.0;
    this.txt_img = null;
  }

  
  public java.lang.String getText() {
    return this.text;
  }

  public TextObject setText( java.lang.String text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  
  public Tetragon getBox() {
    return this.box;
  }

  public TextObject setBox( Tetragon box) {
    this.box = box;
    return this;
  }

  public void unsetBox() {
    this.box = null;
  }

  /** Returns true if field box is set (has been assigned a value) and false otherwise */
  public boolean isSetBox() {
    return this.box != null;
  }

  public void setBoxIsSet(boolean value) {
    if (!value) {
      this.box = null;
    }
  }

  public double getConfidence() {
    return this.confidence;
  }

  public TextObject setConfidence(double confidence) {
    this.confidence = confidence;
    setConfidenceIsSet(true);
    return this;
  }

  public void unsetConfidence() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  /** Returns true if field confidence is set (has been assigned a value) and false otherwise */
  public boolean isSetConfidence() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  public void setConfidenceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONFIDENCE_ISSET_ID, value);
  }

  
  public Image getTxt_img() {
    return this.txt_img;
  }

  public TextObject setTxt_img( Image txt_img) {
    this.txt_img = txt_img;
    return this;
  }

  public void unsetTxt_img() {
    this.txt_img = null;
  }

  /** Returns true if field txt_img is set (has been assigned a value) and false otherwise */
  public boolean isSetTxt_img() {
    return this.txt_img != null;
  }

  public void setTxt_imgIsSet(boolean value) {
    if (!value) {
      this.txt_img = null;
    }
  }

  public void setFieldValue(_Fields field,  java.lang.Object value) {
    switch (field) {
    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((java.lang.String)value);
      }
      break;

    case BOX:
      if (value == null) {
        unsetBox();
      } else {
        setBox((Tetragon)value);
      }
      break;

    case CONFIDENCE:
      if (value == null) {
        unsetConfidence();
      } else {
        setConfidence((java.lang.Double)value);
      }
      break;

    case TXT_IMG:
      if (value == null) {
        unsetTxt_img();
      } else {
        setTxt_img((Image)value);
      }
      break;

    }
  }

  
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TEXT:
      return getText();

    case BOX:
      return getBox();

    case CONFIDENCE:
      return getConfidence();

    case TXT_IMG:
      return getTxt_img();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TEXT:
      return isSetText();
    case BOX:
      return isSetBox();
    case CONFIDENCE:
      return isSetConfidence();
    case TXT_IMG:
      return isSetTxt_img();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TextObject)
      return this.equals((TextObject)that);
    return false;
  }

  public boolean equals(TextObject that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_box = true && this.isSetBox();
    boolean that_present_box = true && that.isSetBox();
    if (this_present_box || that_present_box) {
      if (!(this_present_box && that_present_box))
        return false;
      if (!this.box.equals(that.box))
        return false;
    }

    boolean this_present_confidence = true;
    boolean that_present_confidence = true;
    if (this_present_confidence || that_present_confidence) {
      if (!(this_present_confidence && that_present_confidence))
        return false;
      if (this.confidence != that.confidence)
        return false;
    }

    boolean this_present_txt_img = true && this.isSetTxt_img();
    boolean that_present_txt_img = true && that.isSetTxt_img();
    if (this_present_txt_img || that_present_txt_img) {
      if (!(this_present_txt_img && that_present_txt_img))
        return false;
      if (!this.txt_img.equals(that.txt_img))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetText()) ? 131071 : 524287);
    if (isSetText())
      hashCode = hashCode * 8191 + text.hashCode();

    hashCode = hashCode * 8191 + ((isSetBox()) ? 131071 : 524287);
    if (isSetBox())
      hashCode = hashCode * 8191 + box.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(confidence);

    hashCode = hashCode * 8191 + ((isSetTxt_img()) ? 131071 : 524287);
    if (isSetTxt_img())
      hashCode = hashCode * 8191 + txt_img.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TextObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetText()).compareTo(other.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBox()).compareTo(other.isSetBox());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBox()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.box, other.box);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConfidence()).compareTo(other.isSetConfidence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfidence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confidence, other.confidence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTxt_img()).compareTo(other.isSetTxt_img());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxt_img()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txt_img, other.txt_img);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TextObject(");
    boolean first = true;

    sb.append("text:");
    if (this.text == null) {
      sb.append("null");
    } else {
      sb.append(this.text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("box:");
    if (this.box == null) {
      sb.append("null");
    } else {
      sb.append(this.box);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("confidence:");
    sb.append(this.confidence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("txt_img:");
    if (this.txt_img == null) {
      sb.append("null");
    } else {
      sb.append(this.txt_img);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (box != null) {
      box.validate();
    }
    if (txt_img != null) {
      txt_img.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TextObjectStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TextObjectStandardScheme getScheme() {
      return new TextObjectStandardScheme();
    }
  }

  private static class TextObjectStandardScheme extends org.apache.thrift.scheme.StandardScheme<TextObject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TextObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.text = iprot.readString();
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.box = new Tetragon();
              struct.box.read(iprot);
              struct.setBoxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONFIDENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.confidence = iprot.readDouble();
              struct.setConfidenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TXT_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.txt_img = new Image();
              struct.txt_img.read(iprot);
              struct.setTxt_imgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TextObject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.text != null) {
        oprot.writeFieldBegin(TEXT_FIELD_DESC);
        oprot.writeString(struct.text);
        oprot.writeFieldEnd();
      }
      if (struct.box != null) {
        oprot.writeFieldBegin(BOX_FIELD_DESC);
        struct.box.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONFIDENCE_FIELD_DESC);
      oprot.writeDouble(struct.confidence);
      oprot.writeFieldEnd();
      if (struct.txt_img != null) {
        oprot.writeFieldBegin(TXT_IMG_FIELD_DESC);
        struct.txt_img.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TextObjectTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TextObjectTupleScheme getScheme() {
      return new TextObjectTupleScheme();
    }
  }

  private static class TextObjectTupleScheme extends org.apache.thrift.scheme.TupleScheme<TextObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TextObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetText()) {
        optionals.set(0);
      }
      if (struct.isSetBox()) {
        optionals.set(1);
      }
      if (struct.isSetConfidence()) {
        optionals.set(2);
      }
      if (struct.isSetTxt_img()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetText()) {
        oprot.writeString(struct.text);
      }
      if (struct.isSetBox()) {
        struct.box.write(oprot);
      }
      if (struct.isSetConfidence()) {
        oprot.writeDouble(struct.confidence);
      }
      if (struct.isSetTxt_img()) {
        struct.txt_img.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TextObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.text = iprot.readString();
        struct.setTextIsSet(true);
      }
      if (incoming.get(1)) {
        struct.box = new Tetragon();
        struct.box.read(iprot);
        struct.setBoxIsSet(true);
      }
      if (incoming.get(2)) {
        struct.confidence = iprot.readDouble();
        struct.setConfidenceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.txt_img = new Image();
        struct.txt_img.read(iprot);
        struct.setTxt_imgIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

