/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nuctech.bridge.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-12-16")
public class NucDLReply implements org.apache.thrift.TBase<NucDLReply, NucDLReply._Fields>, java.io.Serializable, Cloneable, Comparable<NucDLReply> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NucDLReply");

  private static final org.apache.thrift.protocol.TField BRAND_FIELD_DESC = new org.apache.thrift.protocol.TField("brand", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CNR_FIELD_DESC = new org.apache.thrift.protocol.TField("cnr", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SEAL_FIELD_DESC = new org.apache.thrift.protocol.TField("seal", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField DANGEROUS_FIELD_DESC = new org.apache.thrift.protocol.TField("dangerous", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField GOODS_FIELD_DESC = new org.apache.thrift.protocol.TField("goods", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField GOODS_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("goods_label", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NucDLReplyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NucDLReplyTupleSchemeFactory();

  public  ClassificationReply brand; // optional
  public  CNRReply cnr; // optional
  public  SealReply seal; // optional
  public  ClassificationReply dangerous; // optional
  public  GoodsReply goods; // optional
  public  GoodsLabelReply goods_label; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BRAND((short)1, "brand"),
    CNR((short)2, "cnr"),
    SEAL((short)3, "seal"),
    DANGEROUS((short)4, "dangerous"),
    GOODS((short)5, "goods"),
    GOODS_LABEL((short)6, "goods_label");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BRAND
          return BRAND;
        case 2: // CNR
          return CNR;
        case 3: // SEAL
          return SEAL;
        case 4: // DANGEROUS
          return DANGEROUS;
        case 5: // GOODS
          return GOODS;
        case 6: // GOODS_LABEL
          return GOODS_LABEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.BRAND,_Fields.CNR,_Fields.SEAL,_Fields.DANGEROUS,_Fields.GOODS,_Fields.GOODS_LABEL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BRAND, new org.apache.thrift.meta_data.FieldMetaData("brand", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClassificationReply.class)));
    tmpMap.put(_Fields.CNR, new org.apache.thrift.meta_data.FieldMetaData("cnr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CNRReply.class)));
    tmpMap.put(_Fields.SEAL, new org.apache.thrift.meta_data.FieldMetaData("seal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SealReply.class)));
    tmpMap.put(_Fields.DANGEROUS, new org.apache.thrift.meta_data.FieldMetaData("dangerous", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClassificationReply.class)));
    tmpMap.put(_Fields.GOODS, new org.apache.thrift.meta_data.FieldMetaData("goods", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GoodsReply.class)));
    tmpMap.put(_Fields.GOODS_LABEL, new org.apache.thrift.meta_data.FieldMetaData("goods_label", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GoodsLabelReply.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NucDLReply.class, metaDataMap);
  }

  public NucDLReply() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NucDLReply(NucDLReply other) {
    if (other.isSetBrand()) {
      this.brand = new ClassificationReply(other.brand);
    }
    if (other.isSetCnr()) {
      this.cnr = new CNRReply(other.cnr);
    }
    if (other.isSetSeal()) {
      this.seal = new SealReply(other.seal);
    }
    if (other.isSetDangerous()) {
      this.dangerous = new ClassificationReply(other.dangerous);
    }
    if (other.isSetGoods()) {
      this.goods = new GoodsReply(other.goods);
    }
    if (other.isSetGoods_label()) {
      this.goods_label = new GoodsLabelReply(other.goods_label);
    }
  }

  public NucDLReply deepCopy() {
    return new NucDLReply(this);
  }

  @Override
  public void clear() {
    this.brand = null;
    this.cnr = null;
    this.seal = null;
    this.dangerous = null;
    this.goods = null;
    this.goods_label = null;
  }

  
  public ClassificationReply getBrand() {
    return this.brand;
  }

  public NucDLReply setBrand( ClassificationReply brand) {
    this.brand = brand;
    return this;
  }

  public void unsetBrand() {
    this.brand = null;
  }

  /** Returns true if field brand is set (has been assigned a value) and false otherwise */
  public boolean isSetBrand() {
    return this.brand != null;
  }

  public void setBrandIsSet(boolean value) {
    if (!value) {
      this.brand = null;
    }
  }

  
  public CNRReply getCnr() {
    return this.cnr;
  }

  public NucDLReply setCnr( CNRReply cnr) {
    this.cnr = cnr;
    return this;
  }

  public void unsetCnr() {
    this.cnr = null;
  }

  /** Returns true if field cnr is set (has been assigned a value) and false otherwise */
  public boolean isSetCnr() {
    return this.cnr != null;
  }

  public void setCnrIsSet(boolean value) {
    if (!value) {
      this.cnr = null;
    }
  }

  
  public SealReply getSeal() {
    return this.seal;
  }

  public NucDLReply setSeal( SealReply seal) {
    this.seal = seal;
    return this;
  }

  public void unsetSeal() {
    this.seal = null;
  }

  /** Returns true if field seal is set (has been assigned a value) and false otherwise */
  public boolean isSetSeal() {
    return this.seal != null;
  }

  public void setSealIsSet(boolean value) {
    if (!value) {
      this.seal = null;
    }
  }

  
  public ClassificationReply getDangerous() {
    return this.dangerous;
  }

  public NucDLReply setDangerous( ClassificationReply dangerous) {
    this.dangerous = dangerous;
    return this;
  }

  public void unsetDangerous() {
    this.dangerous = null;
  }

  /** Returns true if field dangerous is set (has been assigned a value) and false otherwise */
  public boolean isSetDangerous() {
    return this.dangerous != null;
  }

  public void setDangerousIsSet(boolean value) {
    if (!value) {
      this.dangerous = null;
    }
  }

  
  public GoodsReply getGoods() {
    return this.goods;
  }

  public NucDLReply setGoods( GoodsReply goods) {
    this.goods = goods;
    return this;
  }

  public void unsetGoods() {
    this.goods = null;
  }

  /** Returns true if field goods is set (has been assigned a value) and false otherwise */
  public boolean isSetGoods() {
    return this.goods != null;
  }

  public void setGoodsIsSet(boolean value) {
    if (!value) {
      this.goods = null;
    }
  }

  
  public GoodsLabelReply getGoods_label() {
    return this.goods_label;
  }

  public NucDLReply setGoods_label( GoodsLabelReply goods_label) {
    this.goods_label = goods_label;
    return this;
  }

  public void unsetGoods_label() {
    this.goods_label = null;
  }

  /** Returns true if field goods_label is set (has been assigned a value) and false otherwise */
  public boolean isSetGoods_label() {
    return this.goods_label != null;
  }

  public void setGoods_labelIsSet(boolean value) {
    if (!value) {
      this.goods_label = null;
    }
  }

  public void setFieldValue(_Fields field,  java.lang.Object value) {
    switch (field) {
    case BRAND:
      if (value == null) {
        unsetBrand();
      } else {
        setBrand((ClassificationReply)value);
      }
      break;

    case CNR:
      if (value == null) {
        unsetCnr();
      } else {
        setCnr((CNRReply)value);
      }
      break;

    case SEAL:
      if (value == null) {
        unsetSeal();
      } else {
        setSeal((SealReply)value);
      }
      break;

    case DANGEROUS:
      if (value == null) {
        unsetDangerous();
      } else {
        setDangerous((ClassificationReply)value);
      }
      break;

    case GOODS:
      if (value == null) {
        unsetGoods();
      } else {
        setGoods((GoodsReply)value);
      }
      break;

    case GOODS_LABEL:
      if (value == null) {
        unsetGoods_label();
      } else {
        setGoods_label((GoodsLabelReply)value);
      }
      break;

    }
  }

  
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BRAND:
      return getBrand();

    case CNR:
      return getCnr();

    case SEAL:
      return getSeal();

    case DANGEROUS:
      return getDangerous();

    case GOODS:
      return getGoods();

    case GOODS_LABEL:
      return getGoods_label();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BRAND:
      return isSetBrand();
    case CNR:
      return isSetCnr();
    case SEAL:
      return isSetSeal();
    case DANGEROUS:
      return isSetDangerous();
    case GOODS:
      return isSetGoods();
    case GOODS_LABEL:
      return isSetGoods_label();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NucDLReply)
      return this.equals((NucDLReply)that);
    return false;
  }

  public boolean equals(NucDLReply that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_brand = true && this.isSetBrand();
    boolean that_present_brand = true && that.isSetBrand();
    if (this_present_brand || that_present_brand) {
      if (!(this_present_brand && that_present_brand))
        return false;
      if (!this.brand.equals(that.brand))
        return false;
    }

    boolean this_present_cnr = true && this.isSetCnr();
    boolean that_present_cnr = true && that.isSetCnr();
    if (this_present_cnr || that_present_cnr) {
      if (!(this_present_cnr && that_present_cnr))
        return false;
      if (!this.cnr.equals(that.cnr))
        return false;
    }

    boolean this_present_seal = true && this.isSetSeal();
    boolean that_present_seal = true && that.isSetSeal();
    if (this_present_seal || that_present_seal) {
      if (!(this_present_seal && that_present_seal))
        return false;
      if (!this.seal.equals(that.seal))
        return false;
    }

    boolean this_present_dangerous = true && this.isSetDangerous();
    boolean that_present_dangerous = true && that.isSetDangerous();
    if (this_present_dangerous || that_present_dangerous) {
      if (!(this_present_dangerous && that_present_dangerous))
        return false;
      if (!this.dangerous.equals(that.dangerous))
        return false;
    }

    boolean this_present_goods = true && this.isSetGoods();
    boolean that_present_goods = true && that.isSetGoods();
    if (this_present_goods || that_present_goods) {
      if (!(this_present_goods && that_present_goods))
        return false;
      if (!this.goods.equals(that.goods))
        return false;
    }

    boolean this_present_goods_label = true && this.isSetGoods_label();
    boolean that_present_goods_label = true && that.isSetGoods_label();
    if (this_present_goods_label || that_present_goods_label) {
      if (!(this_present_goods_label && that_present_goods_label))
        return false;
      if (!this.goods_label.equals(that.goods_label))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBrand()) ? 131071 : 524287);
    if (isSetBrand())
      hashCode = hashCode * 8191 + brand.hashCode();

    hashCode = hashCode * 8191 + ((isSetCnr()) ? 131071 : 524287);
    if (isSetCnr())
      hashCode = hashCode * 8191 + cnr.hashCode();

    hashCode = hashCode * 8191 + ((isSetSeal()) ? 131071 : 524287);
    if (isSetSeal())
      hashCode = hashCode * 8191 + seal.hashCode();

    hashCode = hashCode * 8191 + ((isSetDangerous()) ? 131071 : 524287);
    if (isSetDangerous())
      hashCode = hashCode * 8191 + dangerous.hashCode();

    hashCode = hashCode * 8191 + ((isSetGoods()) ? 131071 : 524287);
    if (isSetGoods())
      hashCode = hashCode * 8191 + goods.hashCode();

    hashCode = hashCode * 8191 + ((isSetGoods_label()) ? 131071 : 524287);
    if (isSetGoods_label())
      hashCode = hashCode * 8191 + goods_label.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NucDLReply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBrand()).compareTo(other.isSetBrand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrand()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brand, other.brand);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCnr()).compareTo(other.isSetCnr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnr, other.cnr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSeal()).compareTo(other.isSetSeal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seal, other.seal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDangerous()).compareTo(other.isSetDangerous());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDangerous()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dangerous, other.dangerous);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGoods()).compareTo(other.isSetGoods());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoods()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goods, other.goods);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGoods_label()).compareTo(other.isSetGoods_label());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoods_label()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goods_label, other.goods_label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NucDLReply(");
    boolean first = true;

    if (isSetBrand()) {
      sb.append("brand:");
      if (this.brand == null) {
        sb.append("null");
      } else {
        sb.append(this.brand);
      }
      first = false;
    }
    if (isSetCnr()) {
      if (!first) sb.append(", ");
      sb.append("cnr:");
      if (this.cnr == null) {
        sb.append("null");
      } else {
        sb.append(this.cnr);
      }
      first = false;
    }
    if (isSetSeal()) {
      if (!first) sb.append(", ");
      sb.append("seal:");
      if (this.seal == null) {
        sb.append("null");
      } else {
        sb.append(this.seal);
      }
      first = false;
    }
    if (isSetDangerous()) {
      if (!first) sb.append(", ");
      sb.append("dangerous:");
      if (this.dangerous == null) {
        sb.append("null");
      } else {
        sb.append(this.dangerous);
      }
      first = false;
    }
    if (isSetGoods()) {
      if (!first) sb.append(", ");
      sb.append("goods:");
      if (this.goods == null) {
        sb.append("null");
      } else {
        sb.append(this.goods);
      }
      first = false;
    }
    if (isSetGoods_label()) {
      if (!first) sb.append(", ");
      sb.append("goods_label:");
      if (this.goods_label == null) {
        sb.append("null");
      } else {
        sb.append(this.goods_label);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (brand != null) {
      brand.validate();
    }
    if (cnr != null) {
      cnr.validate();
    }
    if (seal != null) {
      seal.validate();
    }
    if (dangerous != null) {
      dangerous.validate();
    }
    if (goods != null) {
      goods.validate();
    }
    if (goods_label != null) {
      goods_label.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NucDLReplyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NucDLReplyStandardScheme getScheme() {
      return new NucDLReplyStandardScheme();
    }
  }

  private static class NucDLReplyStandardScheme extends org.apache.thrift.scheme.StandardScheme<NucDLReply> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NucDLReply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BRAND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.brand = new ClassificationReply();
              struct.brand.read(iprot);
              struct.setBrandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CNR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cnr = new CNRReply();
              struct.cnr.read(iprot);
              struct.setCnrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.seal = new SealReply();
              struct.seal.read(iprot);
              struct.setSealIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DANGEROUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dangerous = new ClassificationReply();
              struct.dangerous.read(iprot);
              struct.setDangerousIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GOODS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.goods = new GoodsReply();
              struct.goods.read(iprot);
              struct.setGoodsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GOODS_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.goods_label = new GoodsLabelReply();
              struct.goods_label.read(iprot);
              struct.setGoods_labelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NucDLReply struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brand != null) {
        if (struct.isSetBrand()) {
          oprot.writeFieldBegin(BRAND_FIELD_DESC);
          struct.brand.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cnr != null) {
        if (struct.isSetCnr()) {
          oprot.writeFieldBegin(CNR_FIELD_DESC);
          struct.cnr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.seal != null) {
        if (struct.isSetSeal()) {
          oprot.writeFieldBegin(SEAL_FIELD_DESC);
          struct.seal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dangerous != null) {
        if (struct.isSetDangerous()) {
          oprot.writeFieldBegin(DANGEROUS_FIELD_DESC);
          struct.dangerous.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.goods != null) {
        if (struct.isSetGoods()) {
          oprot.writeFieldBegin(GOODS_FIELD_DESC);
          struct.goods.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.goods_label != null) {
        if (struct.isSetGoods_label()) {
          oprot.writeFieldBegin(GOODS_LABEL_FIELD_DESC);
          struct.goods_label.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NucDLReplyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NucDLReplyTupleScheme getScheme() {
      return new NucDLReplyTupleScheme();
    }
  }

  private static class NucDLReplyTupleScheme extends org.apache.thrift.scheme.TupleScheme<NucDLReply> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NucDLReply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBrand()) {
        optionals.set(0);
      }
      if (struct.isSetCnr()) {
        optionals.set(1);
      }
      if (struct.isSetSeal()) {
        optionals.set(2);
      }
      if (struct.isSetDangerous()) {
        optionals.set(3);
      }
      if (struct.isSetGoods()) {
        optionals.set(4);
      }
      if (struct.isSetGoods_label()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetBrand()) {
        struct.brand.write(oprot);
      }
      if (struct.isSetCnr()) {
        struct.cnr.write(oprot);
      }
      if (struct.isSetSeal()) {
        struct.seal.write(oprot);
      }
      if (struct.isSetDangerous()) {
        struct.dangerous.write(oprot);
      }
      if (struct.isSetGoods()) {
        struct.goods.write(oprot);
      }
      if (struct.isSetGoods_label()) {
        struct.goods_label.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NucDLReply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.brand = new ClassificationReply();
        struct.brand.read(iprot);
        struct.setBrandIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cnr = new CNRReply();
        struct.cnr.read(iprot);
        struct.setCnrIsSet(true);
      }
      if (incoming.get(2)) {
        struct.seal = new SealReply();
        struct.seal.read(iprot);
        struct.setSealIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dangerous = new ClassificationReply();
        struct.dangerous.read(iprot);
        struct.setDangerousIsSet(true);
      }
      if (incoming.get(4)) {
        struct.goods = new GoodsReply();
        struct.goods.read(iprot);
        struct.setGoodsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.goods_label = new GoodsLabelReply();
        struct.goods_label.read(iprot);
        struct.setGoods_labelIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

