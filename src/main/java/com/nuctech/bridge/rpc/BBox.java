/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nuctech.bridge.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-12-16")
public class BBox implements org.apache.thrift.TBase<BBox, BBox._Fields>, java.io.Serializable, Cloneable, Comparable<BBox> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BBox");

  private static final org.apache.thrift.protocol.TField XMIN_FIELD_DESC = new org.apache.thrift.protocol.TField("xmin", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField YMIN_FIELD_DESC = new org.apache.thrift.protocol.TField("ymin", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField XMAX_FIELD_DESC = new org.apache.thrift.protocol.TField("xmax", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField YMAX_FIELD_DESC = new org.apache.thrift.protocol.TField("ymax", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BBoxStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BBoxTupleSchemeFactory();

  public double xmin; // required
  public double ymin; // required
  public double xmax; // required
  public double ymax; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    XMIN((short)1, "xmin"),
    YMIN((short)2, "ymin"),
    XMAX((short)3, "xmax"),
    YMAX((short)4, "ymax");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // XMIN
          return XMIN;
        case 2: // YMIN
          return YMIN;
        case 3: // XMAX
          return XMAX;
        case 4: // YMAX
          return YMAX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __XMIN_ISSET_ID = 0;
  private static final int __YMIN_ISSET_ID = 1;
  private static final int __XMAX_ISSET_ID = 2;
  private static final int __YMAX_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.XMIN, new org.apache.thrift.meta_data.FieldMetaData("xmin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YMIN, new org.apache.thrift.meta_data.FieldMetaData("ymin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.XMAX, new org.apache.thrift.meta_data.FieldMetaData("xmax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YMAX, new org.apache.thrift.meta_data.FieldMetaData("ymax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BBox.class, metaDataMap);
  }

  public BBox() {
  }

  public BBox(
    double xmin,
    double ymin,
    double xmax,
    double ymax)
  {
    this();
    this.xmin = xmin;
    setXminIsSet(true);
    this.ymin = ymin;
    setYminIsSet(true);
    this.xmax = xmax;
    setXmaxIsSet(true);
    this.ymax = ymax;
    setYmaxIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BBox(BBox other) {
    __isset_bitfield = other.__isset_bitfield;
    this.xmin = other.xmin;
    this.ymin = other.ymin;
    this.xmax = other.xmax;
    this.ymax = other.ymax;
  }

  public BBox deepCopy() {
    return new BBox(this);
  }

  @Override
  public void clear() {
    setXminIsSet(false);
    this.xmin = 0.0;
    setYminIsSet(false);
    this.ymin = 0.0;
    setXmaxIsSet(false);
    this.xmax = 0.0;
    setYmaxIsSet(false);
    this.ymax = 0.0;
  }

  public double getXmin() {
    return this.xmin;
  }

  public BBox setXmin(double xmin) {
    this.xmin = xmin;
    setXminIsSet(true);
    return this;
  }

  public void unsetXmin() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __XMIN_ISSET_ID);
  }

  /** Returns true if field xmin is set (has been assigned a value) and false otherwise */
  public boolean isSetXmin() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __XMIN_ISSET_ID);
  }

  public void setXminIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __XMIN_ISSET_ID, value);
  }

  public double getYmin() {
    return this.ymin;
  }

  public BBox setYmin(double ymin) {
    this.ymin = ymin;
    setYminIsSet(true);
    return this;
  }

  public void unsetYmin() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __YMIN_ISSET_ID);
  }

  /** Returns true if field ymin is set (has been assigned a value) and false otherwise */
  public boolean isSetYmin() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __YMIN_ISSET_ID);
  }

  public void setYminIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __YMIN_ISSET_ID, value);
  }

  public double getXmax() {
    return this.xmax;
  }

  public BBox setXmax(double xmax) {
    this.xmax = xmax;
    setXmaxIsSet(true);
    return this;
  }

  public void unsetXmax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __XMAX_ISSET_ID);
  }

  /** Returns true if field xmax is set (has been assigned a value) and false otherwise */
  public boolean isSetXmax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __XMAX_ISSET_ID);
  }

  public void setXmaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __XMAX_ISSET_ID, value);
  }

  public double getYmax() {
    return this.ymax;
  }

  public BBox setYmax(double ymax) {
    this.ymax = ymax;
    setYmaxIsSet(true);
    return this;
  }

  public void unsetYmax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __YMAX_ISSET_ID);
  }

  /** Returns true if field ymax is set (has been assigned a value) and false otherwise */
  public boolean isSetYmax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __YMAX_ISSET_ID);
  }

  public void setYmaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __YMAX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field,  java.lang.Object value) {
    switch (field) {
    case XMIN:
      if (value == null) {
        unsetXmin();
      } else {
        setXmin((java.lang.Double)value);
      }
      break;

    case YMIN:
      if (value == null) {
        unsetYmin();
      } else {
        setYmin((java.lang.Double)value);
      }
      break;

    case XMAX:
      if (value == null) {
        unsetXmax();
      } else {
        setXmax((java.lang.Double)value);
      }
      break;

    case YMAX:
      if (value == null) {
        unsetYmax();
      } else {
        setYmax((java.lang.Double)value);
      }
      break;

    }
  }

  
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case XMIN:
      return getXmin();

    case YMIN:
      return getYmin();

    case XMAX:
      return getXmax();

    case YMAX:
      return getYmax();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case XMIN:
      return isSetXmin();
    case YMIN:
      return isSetYmin();
    case XMAX:
      return isSetXmax();
    case YMAX:
      return isSetYmax();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BBox)
      return this.equals((BBox)that);
    return false;
  }

  public boolean equals(BBox that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_xmin = true;
    boolean that_present_xmin = true;
    if (this_present_xmin || that_present_xmin) {
      if (!(this_present_xmin && that_present_xmin))
        return false;
      if (this.xmin != that.xmin)
        return false;
    }

    boolean this_present_ymin = true;
    boolean that_present_ymin = true;
    if (this_present_ymin || that_present_ymin) {
      if (!(this_present_ymin && that_present_ymin))
        return false;
      if (this.ymin != that.ymin)
        return false;
    }

    boolean this_present_xmax = true;
    boolean that_present_xmax = true;
    if (this_present_xmax || that_present_xmax) {
      if (!(this_present_xmax && that_present_xmax))
        return false;
      if (this.xmax != that.xmax)
        return false;
    }

    boolean this_present_ymax = true;
    boolean that_present_ymax = true;
    if (this_present_ymax || that_present_ymax) {
      if (!(this_present_ymax && that_present_ymax))
        return false;
      if (this.ymax != that.ymax)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(xmin);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ymin);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(xmax);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ymax);

    return hashCode;
  }

  @Override
  public int compareTo(BBox other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetXmin()).compareTo(other.isSetXmin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXmin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xmin, other.xmin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetYmin()).compareTo(other.isSetYmin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYmin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ymin, other.ymin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXmax()).compareTo(other.isSetXmax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXmax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xmax, other.xmax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetYmax()).compareTo(other.isSetYmax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYmax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ymax, other.ymax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BBox(");
    boolean first = true;

    sb.append("xmin:");
    sb.append(this.xmin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ymin:");
    sb.append(this.ymin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("xmax:");
    sb.append(this.xmax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ymax:");
    sb.append(this.ymax);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BBoxStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BBoxStandardScheme getScheme() {
      return new BBoxStandardScheme();
    }
  }

  private static class BBoxStandardScheme extends org.apache.thrift.scheme.StandardScheme<BBox> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BBox struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // XMIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.xmin = iprot.readDouble();
              struct.setXminIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // YMIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ymin = iprot.readDouble();
              struct.setYminIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // XMAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.xmax = iprot.readDouble();
              struct.setXmaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // YMAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ymax = iprot.readDouble();
              struct.setYmaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BBox struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(XMIN_FIELD_DESC);
      oprot.writeDouble(struct.xmin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YMIN_FIELD_DESC);
      oprot.writeDouble(struct.ymin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(XMAX_FIELD_DESC);
      oprot.writeDouble(struct.xmax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YMAX_FIELD_DESC);
      oprot.writeDouble(struct.ymax);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BBoxTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BBoxTupleScheme getScheme() {
      return new BBoxTupleScheme();
    }
  }

  private static class BBoxTupleScheme extends org.apache.thrift.scheme.TupleScheme<BBox> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BBox struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetXmin()) {
        optionals.set(0);
      }
      if (struct.isSetYmin()) {
        optionals.set(1);
      }
      if (struct.isSetXmax()) {
        optionals.set(2);
      }
      if (struct.isSetYmax()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetXmin()) {
        oprot.writeDouble(struct.xmin);
      }
      if (struct.isSetYmin()) {
        oprot.writeDouble(struct.ymin);
      }
      if (struct.isSetXmax()) {
        oprot.writeDouble(struct.xmax);
      }
      if (struct.isSetYmax()) {
        oprot.writeDouble(struct.ymax);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BBox struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.xmin = iprot.readDouble();
        struct.setXminIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ymin = iprot.readDouble();
        struct.setYminIsSet(true);
      }
      if (incoming.get(2)) {
        struct.xmax = iprot.readDouble();
        struct.setXmaxIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ymax = iprot.readDouble();
        struct.setYmaxIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

